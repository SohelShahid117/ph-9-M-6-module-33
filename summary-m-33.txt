****************Module 33: API, JSON, Data Load, Dynamic Website******************

33-1 How Does Internet Work, HTTP Vs HTTPs And What Is An API
1.ip address
2.domain name system-DNS
3.HTTP-hyper text transfer protocol
4.HTTP vs HTTPS
5.what is server
6.what is internet
7.user/client side---server---database



33-2 Intro To JSON, JSON Structure, Parse, Stringify:

const user = {
    id: 1,
    name: 'sohel',
    job: 'business'
};
console.log(user);

const stringyfied = JSON.stringify(user);
console.log(stringyfied);

const shop = {
    owner: 'Alia',
    address: {
        road: 'meyor goli',
        city: 'ctg',
        country: 'BD'
    },
    products: ['mice', 'mouse', 'keynoard', 'laptop'],
    revenue: 45000,
    isOpen: true,
    isNew: false
}
console.log(shop);
const shopStringified = JSON.stringify(shop);
console.log(shopStringified);

console.log(typeof shop)
console.log(typeof shopStringified)

const shopObj = JSON.parse(shopStringified);
console.log(shopObj);
console.log(typeof shopObj);



33-3 JSON Placeholder, GET Data, Display Data On UI:
33-4 Load More Data, More APIs, Send Data To Function
33-5 Dynamically Display Loaded Data On Your Website

1.
fetch('https://jsonplaceholder.typicode.com/todos/1')
    .then(response => response.json())
    .then(json => console.log(json))

2.
const url = "https://jsonplaceholder.typicode.com/todos/1";
function loadData() {
    fetch(url)
        .then(res => res.json())
        .then(data => console.log(data))
}
3.
function loadUsers() {
    fetch('https://jsonplaceholder.typicode.com/users')
        .then(res => res.json())
        .then(data => displayUser(data))
}

function displayUser(datum) {
    // console.log(datum)
    const usersList = document.getElementById('users-list');
    for (user of datum) {
        // console.log(user)
        // console.log(user.name)
        // console.log(user.email)
        const li = document.createElement('li');
        li.innerText = user.name;
        usersList.appendChild(li);
    }
}


33-6 Load Posts And Display On The Website With CSS:
1.
function loadPost() {
    const url = 'https://jsonplaceholder.typicode.com/posts';
    fetch(url)
        .then(res => res.json())
        // .then(data => console.log(data))
        .then(data => displayPost(data))
}
function displayPost(posts) {
    console.log(posts)
    const postContainer = document.getElementById('post-container');
    for (pst of posts) {
        console.log(pst)
        const div = document.createElement('div');
        div.classList.add('post-div');
        div.innerHTML = `
            <h2>Id: ${pst.id}</h2>
            <h3>userId: ${pst.userId}</h3>
            <h4>Title: ${pst.title}</h4>
            <p>Body/Post Description: ${pst.body}</p>
        `
        // div.innerText = pst.userId;
        postContainer.appendChild(div);
    }
}



33-7 GET, POST, PATCH, DELETE, CRUD, GET Vs POST:

1.CRUD(create,read,update,delete)
2.Rest API method(GET===read,POST===create,PUT/PATCH===update,DELETE===delete)
3.PUT VS POST VS PATCH
4.
PUT = create a new resourse or replace if the resourse existing
POST = create a new resourse
PATCH = Partially update an existing resourse

5.HTTP Status code
1.200
2.301
3.302
4.404
5.500
6.503



33-8 Debug API, Network Tab,Status Code, Headers, Bad API:

1.
function deleteApost() {
    console.log('hi');
    const url = 'https://jsonplaceholder.typicode.com/posts/1';
    fetch(url, {
        method: 'DELETE'
    })
}

2.
function patchApost() {
    fetch('https://jsonplaceholder.typicode.com/posts/1', {
        method: 'PATCH',
        body: JSON.stringify({
            title: 'foo',
        }),
        headers: {
            'Content-type': 'application/json; charset=UTF-8',
        },
    })
        .then((response) => response.json())
        .then((json) => console.log(json));
}

3.
function createApost() {
    fetch('https://jsonplaceholder.typicode.com/posts', {
        method: 'POST',
        body: JSON.stringify({
            title: 'foo',
            body: 'bar',
            userId: 1,
        }),
        headers: {
            'Content-type': 'application/json; charset=UTF-8',
        },
    })
        .then((response) => response.json())
        .then((json) => console.log(json));
}

4.http status code :https://developer.mozilla.org/en-US/docs/Web/HTTP/Status


33-9 Async Await And Interview Questions:
1.
const loadComments = () => {
    const url = 'https://jsonplaceholder.typicode.com/comments';
    fetch(url)
        .then(res => res.json())
        .then(res => res.jon())
        // .then(data => console.log(data))
        .catch(err => console.log(err))
    // .catch(err => console.error(err))
}

2.
const loadComments2 = async () => {
    const res = await fetch('https://jsonplaceholder.typicode.com/comments')
    const data = await res.json()
    console.log(data)
}

3.
const loadComments3 = async () => {
    try {
        const res = await fetch('https://jsonplaceholder.typicode.com/comments')
        // const data = await res.json()
        const data = await res.jon()
        console.log(data)
    } catch (err) {
        console.log(err)
    }
}





